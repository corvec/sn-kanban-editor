{"version":3,"sources":["components/Editor.tsx","reportWebVitals.ts","index.tsx"],"names":["HtmlElementId","HtmlClassName","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialState","printUrl","boardData","lanes","keyMap","Map","Editor","props","editorKit","configureEditorKit","delegate","EditorKitDelegate","setEditorRawText","text","parsedBoardData","data","JSON","parse","hasOwnProperty","err","console","error","setState","clearUndoHistory","getElementsBySelector","EditorKit","mode","supportsFilesafe","handleDataChange","stringify","saveNote","onEditorValueChanged","log","onBlur","e","onFocus","onKeyDown","set","key","get","preventDefault","onKeyUp","delete","state","this","className","snComponent","id","tabIndex","board","canAddLanes","editable","editLaneTitle","onDataChange","React","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6OAIYA,EAKAC,E,yCCKGC,G,OAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,Q,gFDLFH,K,cAAAA,E,4BAAAA,M,cAKAC,K,gCAAAA,E,4BAAAA,M,KAUZ,IAAMU,EAAe,CACnBC,UAAU,EACVC,UAAW,CAAEC,MAAO,KAGlBC,EAAS,IAAIC,IAEIC,E,kDAGnB,WAAYC,GAAyB,IAAD,8BAClC,cAAMA,IAHRC,eAEoC,IAMpCC,mBAAqB,WACnB,IAAIC,EAAW,IAAIC,oBAAkB,CAEnCC,iBAAkB,SAACC,GAEjB,IAAMC,EAAmB,WACvB,IACE,IAAMC,EAAOC,KAAKC,MAAMJ,GACxB,GAAIE,EAAKG,eAAe,SACtB,OAAOH,EAET,MAAOI,GACPC,QAAQC,MAAM,gCAEhB,MAAO,CAAElB,MAAO,IATO,GAWzB,EAAKmB,SAAL,2BACKtB,GADL,IAEEE,UAAWY,MAGfS,iBAAkB,aAClBC,sBAAuB,iBAAM,MAG/B,EAAKhB,UAAY,IAAIiB,YAAU,CAC7Bf,SAAUA,EACVgB,KAAM,YACNC,kBAAkB,KAlCc,EAsCpCC,iBAAmB,SAAC1B,GAClB,IAAMW,EAAOG,KAAKa,UAAU3B,GAC5B,EAAK4B,SAASjB,IAxCoB,EA6CpCiB,SAAW,SAACjB,GAIV,IACE,EAAKL,UAAUuB,qBAAqBlB,GACpC,MAAOQ,GACPD,QAAQY,IAAI,qBAAsBX,KApDF,EAwDpCY,OAAS,SAACC,KAxD0B,EA0DpCC,QAAU,SAACD,KA1DyB,EA4DpCE,UAAY,SAACF,GACX9B,EAAOiC,IAAIH,EAAEI,KAAK,GAEdlC,EAAOmC,IAAI,YAAcnC,EAAOmC,IAAI,MACtCL,EAAEM,kBAhE8B,EAoEpCC,QAAU,SAACP,GACT9B,EAAOsC,OAAOR,EAAEI,MAnEhB,EAAK7B,qBACL,EAAKkC,MAAQ3C,EAHqB,E,qDAwE1B,IACAE,EAAc0C,KAAKD,MAAnBzC,UACR,OACE,qBACE2C,UACExD,EAAcyD,aAAeF,KAAKD,MAAM1C,SAAW,aAAe,IAEpE8C,GAAI1D,EAAcyD,YAClBE,SAAU,EALZ,SAOE,cAAC,IAAD,CACED,GAAI1D,EAAc4D,MAClBlC,KAAMb,EACNgD,aAAW,EACXC,UAAQ,EACRC,eAAa,EACbC,aAAcT,KAAKhB,yB,GA3FO0B,IAAMC,W,OEnB1CC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BrE,M","file":"static/js/main.764aa62e.chunk.js","sourcesContent":["import React from 'react';\nimport { EditorKit, EditorKitDelegate } from 'sn-editor-kit';\nimport Board from 'react-trello';\n\nexport enum HtmlElementId {\n  board = 'board',\n  snComponent = 'sn-component',\n}\n\nexport enum HtmlClassName {\n  board = 'sk-input contrast board',\n  snComponent = 'sn-component',\n}\n\nexport interface EditorInterface {\n  printUrl: boolean;\n  boardData: object;\n}\n\nconst initialState = {\n  printUrl: false,\n  boardData: { lanes: [] },\n};\n\nlet keyMap = new Map();\n\nexport default class Editor extends React.Component<{}, EditorInterface> {\n  editorKit: any;\n\n  constructor(props: EditorInterface) {\n    super(props);\n    this.configureEditorKit();\n    this.state = initialState;\n  }\n\n  configureEditorKit = () => {\n    let delegate = new EditorKitDelegate({\n      /** This loads every time a different note is loaded */\n      setEditorRawText: (text: string) => {\n        // TODO: handle failures to parse\n        const parsedBoardData = (() => {\n          try {\n            const data = JSON.parse(text);\n            if (data.hasOwnProperty('lanes')) {\n              return data;\n            }\n          } catch (err) {\n            console.error('Could not parse note as JSON');\n          }\n          return { lanes: [] };\n        })();\n        this.setState({\n          ...initialState,\n          boardData: parsedBoardData,\n        });\n      },\n      clearUndoHistory: () => {},\n      getElementsBySelector: () => [],\n    });\n\n    this.editorKit = new EditorKit({\n      delegate: delegate,\n      mode: 'plaintext',\n      supportsFilesafe: false,\n    });\n  };\n\n  handleDataChange = (boardData: object) => {\n    const text = JSON.stringify(boardData);\n    this.saveNote(text);\n    // should be unneeded as the React-Trello handles its state internally\n    // this.setState({ boardData });\n  };\n\n  saveNote = (text: string) => {\n    /** This will work in an SN context, but breaks the standalone editor,\n     * so we need to catch the error\n     */\n    try {\n      this.editorKit.onEditorValueChanged(text);\n    } catch (error) {\n      console.log('Error saving note:', error);\n    }\n  };\n\n  onBlur = (e: React.FocusEvent) => {};\n\n  onFocus = (e: React.FocusEvent) => {};\n\n  onKeyDown = (e: React.KeyboardEvent | KeyboardEvent) => {\n    keyMap.set(e.key, true);\n    // Do nothing if 'Control' and 's' are pressed\n    if (keyMap.get('Control') && keyMap.get('s')) {\n      e.preventDefault();\n    }\n  };\n\n  onKeyUp = (e: React.KeyboardEvent | KeyboardEvent) => {\n    keyMap.delete(e.key);\n  };\n\n  render() {\n    const { boardData } = this.state;\n    return (\n      <div\n        className={\n          HtmlElementId.snComponent + (this.state.printUrl ? ' print-url' : '')\n        }\n        id={HtmlElementId.snComponent}\n        tabIndex={0}\n      >\n        <Board\n          id={HtmlElementId.board}\n          data={boardData}\n          canAddLanes\n          editable\n          editLaneTitle\n          onDataChange={this.handleDataChange}\n        />\n      </div>\n    );\n  }\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport reportWebVitals from './reportWebVitals';\n\nimport Editor from './components/Editor';\nimport './stylesheets/main.scss';\nReactDOM.render(\n  <React.StrictMode>\n    <Editor />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}